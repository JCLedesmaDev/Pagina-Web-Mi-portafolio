{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n// const isInWebApp = window.matchMedia(\"(display-mode: standalone)\").matches;\nconst isInWebApp = true;\nexport function useAddToHomeScreenPrompt() {\n  _s();\n\n  /* CODIGO SACADO DE: https://www.youtube.com/watch?v=3f20qBfACzI\r\n   No entendi su funcionamiento pero anda.\r\n  \r\n    Practicamente lo que hace es: Si al ingresar a la pagina, no tenes \r\n    la app instalada, te aparece una ventanita para isntalar\r\n    caso contrario, si lo tenes instalado, no te aparece nada.\r\n  */\n  const [prompt, setPrompt] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  const [finishInstallation, setFinishInstallation] = useState(isInWebApp); // Hace aparecer la ventana para isntalar\n\n  const promptToInstall = useCallback(async () => {\n    if (prompt) {\n      prompt.prompt();\n      const choiceResult = await prompt.userChoice;\n\n      if (choiceResult.outcome === \"accepted\") {\n        setFinishInstallation(true);\n      }\n\n      return;\n    }\n\n    return Promise.reject(new Error('Tried installing before browser sent \"beforeinstallprompt\" event'));\n  }, [prompt]);\n  useEffect(() => {\n    if (prompt) {\n      setIsReady(true);\n    }\n  }, [prompt]);\n\n  function ready(e) {\n    e.preventDefault();\n    setPrompt(e);\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"beforeinstallprompt\", ready);\n    return function () {\n      window.removeEventListener(\"beforeinstallprompt\", ready);\n    };\n  }, []);\n  return useMemo(() => ({\n    isReady,\n    promptToInstall,\n    finishInstallation\n  }), [isReady, promptToInstall, finishInstallation]);\n}\n\n_s(useAddToHomeScreenPrompt, \"udDDNXalypMAuQmSpxY2iY3yyeU=\");","map":{"version":3,"sources":["D:/Juanchi/Programacion/Practicas realizadas/01-02-22 React y TypeScript - React-portafolio-pwa/src/Hooks/useAddToHomeScreenPrompt.tsx"],"names":["useCallback","useEffect","useMemo","useState","isInWebApp","useAddToHomeScreenPrompt","prompt","setPrompt","isReady","setIsReady","finishInstallation","setFinishInstallation","promptToInstall","choiceResult","userChoice","outcome","Promise","reject","Error","ready","e","preventDefault","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AAWA;AACA,MAAMC,UAAU,GAAG,IAAnB;AAEA,OAAO,SAASC,wBAAT,GAAoC;AAAA;;AACzC;AACF;AACA;AACA;AACA;AACA;AACA;AAEE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAmC,IAAnC,CAApC;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAACC,UAAD,CAA5D,CAXyC,CAazC;;AACA,QAAMQ,eAAe,GAAGZ,WAAW,CAAC,YAAY;AAC9C,QAAIM,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACA,MAAP;AAEA,YAAMO,YAAY,GAAG,MAAMP,MAAM,CAACQ,UAAlC;;AACA,UAAID,YAAY,CAACE,OAAb,KAAyB,UAA7B,EAAyC;AACvCJ,QAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;;AAED;AACD;;AAED,WAAOK,OAAO,CAACC,MAAR,CACL,IAAIC,KAAJ,CACE,kEADF,CADK,CAAP;AAKD,GAjBkC,EAiBhC,CAACZ,MAAD,CAjBgC,CAAnC;AAmBAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,MAAJ,EAAY;AACVG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACH,MAAD,CAJM,CAAT;;AAMA,WAASa,KAAT,CAAeC,CAAf,EAA6C;AAC3CA,IAAAA,CAAC,CAACC,cAAF;AACAd,IAAAA,SAAS,CAACa,CAAD,CAAT;AACD;;AAEDnB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,qBAAxB,EAA+CJ,KAA/C;AAEA,WAAO,YAAY;AACjBG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,qBAA3B,EAAkDL,KAAlD;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT;AAQA,SAAOjB,OAAO,CACZ,OAAO;AACLM,IAAAA,OADK;AAELI,IAAAA,eAFK;AAGLF,IAAAA;AAHK,GAAP,CADY,EAMZ,CAACF,OAAD,EAAUI,eAAV,EAA2BF,kBAA3B,CANY,CAAd;AAQD;;GA5DeL,wB","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from \"react\";\r\n\r\ninterface IBeforeInstallPromptEvent extends Event {\r\n  readonly platforms: string[];\r\n  readonly userChoice: Promise<{\r\n    outcome: \"accepted\" | \"dismissed\";\r\n    platform: string;\r\n  }>;\r\n  prompt(): Promise<void>;\r\n}\r\n\r\n// const isInWebApp = window.matchMedia(\"(display-mode: standalone)\").matches;\r\nconst isInWebApp = true;\r\n\r\nexport function useAddToHomeScreenPrompt() {\r\n  /* CODIGO SACADO DE: https://www.youtube.com/watch?v=3f20qBfACzI\r\n   No entendi su funcionamiento pero anda.\r\n  \r\n    Practicamente lo que hace es: Si al ingresar a la pagina, no tenes \r\n    la app instalada, te aparece una ventanita para isntalar\r\n    caso contrario, si lo tenes instalado, no te aparece nada.\r\n  */\r\n\r\n  const [prompt, setPrompt] = useState<IBeforeInstallPromptEvent | null>(null);\r\n  const [isReady, setIsReady] = useState(false);\r\n  const [finishInstallation, setFinishInstallation] = useState(isInWebApp);\r\n\r\n  // Hace aparecer la ventana para isntalar\r\n  const promptToInstall = useCallback(async () => {\r\n    if (prompt) {\r\n      prompt.prompt();\r\n\r\n      const choiceResult = await prompt.userChoice;\r\n      if (choiceResult.outcome === \"accepted\") {\r\n        setFinishInstallation(true);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    return Promise.reject(\r\n      new Error(\r\n        'Tried installing before browser sent \"beforeinstallprompt\" event'\r\n      )\r\n    );\r\n  }, [prompt]);\r\n\r\n  useEffect(() => {\r\n    if (prompt) {\r\n      setIsReady(true);\r\n    }\r\n  }, [prompt]);\r\n\r\n  function ready(e: IBeforeInstallPromptEvent) {\r\n    e.preventDefault();\r\n    setPrompt(e);\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"beforeinstallprompt\", ready as any);\r\n\r\n    return function () {\r\n      window.removeEventListener(\"beforeinstallprompt\", ready as any);\r\n    };\r\n  }, []);\r\n\r\n  return useMemo(\r\n    () => ({\r\n      isReady,\r\n      promptToInstall,\r\n      finishInstallation,\r\n    }),\r\n    [isReady, promptToInstall, finishInstallation]\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}