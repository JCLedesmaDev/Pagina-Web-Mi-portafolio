{"ast":null,"code":"import _objectSpread from\"D:\\\\Juanchi\\\\Programacion\\\\Practicas realizadas\\\\01-02-22 React y TypeScript - React-portafolio-pwa\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import myDataES from\"../Language/myData-ES.json\";import myDataEN from\"../Language/myData-EN.json\";var INITIAL_STATE={spanish:myDataES,english:myDataEN};export var useMyData=function useMyData(){//   /* TODO: MEJORAR; VER CON CONTEXT\n//     Usar este custom hook dentro del useContext y en cada componente\n//     en vez de llamar a useMyData, seria llamar al useContext\n//\n//    PD: Cuando haga la funcionalidad de cambiar de español a\n//     ingles, descomentar todo y  borrar lo unico q retorna\n//   */\n// const lenguage = localStorage.getItem(\"leng\") as any;\n// const [idioma, setIdioma] = useState<IMyData>();\n// const selectLenguage: any = {\n//   ES: () => {\n//     setIdioma(INITIAL_STATE.spanish);\n//     localStorage.setItem(\"leng\", \"ES\");\n//   },\n//   EN: () => {\n//     setIdioma(INITIAL_STATE.english);\n//     localStorage.setItem(\"leng\", \"EN\");\n//   },\n// };\n// const changeLenguage = () => {\n//   lenguage === \"ES\" ? selectLenguage[\"EN\"]() : selectLenguage[\"ES\"]();\n//   window.location.reload()\n// };\n// useEffect(() => {\n//   lenguage ? selectLenguage[lenguage]() : selectLenguage[\"ES\"]();\n// }, []);\n/*  */return _objectSpread({},INITIAL_STATE.spanish);};","map":{"version":3,"sources":["D:/Juanchi/Programacion/Practicas realizadas/01-02-22 React y TypeScript - React-portafolio-pwa/src/Hooks/useMyData.tsx"],"names":["myDataES","myDataEN","INITIAL_STATE","spanish","english","useMyData"],"mappings":"8LAAA,MAAOA,CAAAA,QAAP,KAAqB,4BAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,4BAArB,CAIA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,OAAO,CAAEH,QADW,CAEpBI,OAAO,CAAEH,QAFW,CAAtB,CAKA,MAAO,IAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA,MACA,wBACKH,aAAa,CAACC,OADnB,EAKD,CAxCM","sourcesContent":["import myDataES from \"../Language/myData-ES.json\";\r\nimport myDataEN from \"../Language/myData-EN.json\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IMyData } from \"../Interface/IMyData\";\r\n\r\nconst INITIAL_STATE = {\r\n  spanish: myDataES,\r\n  english: myDataEN,\r\n};\r\n\r\nexport const useMyData = () => {\r\n  //   /* TODO: MEJORAR; VER CON CONTEXT\r\n  //     Usar este custom hook dentro del useContext y en cada componente\r\n  //     en vez de llamar a useMyData, seria llamar al useContext\r\n  //\r\n  //    PD: Cuando haga la funcionalidad de cambiar de español a\r\n  //     ingles, descomentar todo y  borrar lo unico q retorna\r\n  //   */\r\n\r\n  // const lenguage = localStorage.getItem(\"leng\") as any;\r\n\r\n  // const [idioma, setIdioma] = useState<IMyData>();\r\n\r\n  // const selectLenguage: any = {\r\n  //   ES: () => {\r\n  //     setIdioma(INITIAL_STATE.spanish);\r\n  //     localStorage.setItem(\"leng\", \"ES\");\r\n  //   },\r\n  //   EN: () => {\r\n  //     setIdioma(INITIAL_STATE.english);\r\n  //     localStorage.setItem(\"leng\", \"EN\");\r\n  //   },\r\n  // };\r\n\r\n\r\n  // const changeLenguage = () => {\r\n  //   lenguage === \"ES\" ? selectLenguage[\"EN\"]() : selectLenguage[\"ES\"]();\r\n  //   window.location.reload()\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   lenguage ? selectLenguage[lenguage]() : selectLenguage[\"ES\"]();\r\n  // }, []);\r\n\r\n  /*  */\r\n  return {\r\n    ...INITIAL_STATE.spanish,\r\n    // ...idioma,\r\n    // changeLenguage,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}